if we select the precautions drop down options check box data and area of disease effect drop check box data and click on submit button then automatically pdf report will be generated and that pdf  document contains precautions data and area of disease effect data complete code using python using django framework


Add a new dropdown with name prescription, which on selection of an item in the dropdown, open an inner datalist to select the items and click on submit button then automatically pdf report will be generated and that pdf  document contains prescription data and inner datalist data this data can be stored in mysql database prescription table along with inner datalist data and complete code using python using django framework.

select the drop down data which on selection of value shows the  inner datalist of check boxes and submit the button to generate the pdf document complete code using python with django framework using mysql database

Add a new dropdown with name prescription, which on selection of an item in the dropdown, open an inner datalist to select the items and click on submit button then automatically pdf report will be generated and that pdf  document contains prescription data and inner datalist data this data can be stored in mysql database prescription table along with inner datalist data and complete code models.py, forms.py,views.py,settings.py and urls.py using python using django framework.

===============================================================================================
create a drop down list with inner drop down with check boxes to select the required data using django forms and click on submit to generate the pdf document complete code in django forms.py with sample health care prescription data
ChatGPT said:
ChatGPT
To create a drop-down list with inner drop-downs and checkboxes in Django forms and generate a PDF document upon submission, you'll need to go through several steps:

Create the Django Form
Handle Form Submission in the View
Generate the PDF
Setup the HTML Template
Step 1: Create the Django Form (forms.py)
We'll create a form with a drop-down list and inner drop-down lists with checkboxes. For this example, I'll simulate the data for a healthcare prescription form.

python
Copy code
from django import forms

# Define choices for prescriptions
MEDICATION_CHOICES = [
    ('aspirin', 'Aspirin'),
    ('ibuprofen', 'Ibuprofen'),
    ('paracetamol', 'Paracetamol'),
    ('amoxicillin', 'Amoxicillin'),
]

# Define choices for dosage
DOSAGE_CHOICES = [
    ('low', 'Low'),
    ('medium', 'Medium'),
    ('high', 'High'),
]

# Define the Health Care Prescription Form
class PrescriptionForm(forms.Form):
    patient_name = forms.CharField(max_length=100, label='Patient Name', required=True)
    doctor_name = forms.CharField(max_length=100, label='Doctor Name', required=True)
    
    # Medications: Drop-down with inner checkboxes
    medications = forms.MultipleChoiceField(
        choices=MEDICATION_CHOICES,
        widget=forms.CheckboxSelectMultiple,
        label='Select Medications'
    )

    # Dosage: Drop-down list
    dosage = forms.ChoiceField(
        choices=DOSAGE_CHOICES,
        widget=forms.Select,
        label='Select Dosage'
    )
    
    # Additional fields for prescription instructions
    additional_instructions = forms.CharField(
        widget=forms.Textarea(attrs={'rows': 3, 'cols': 50}),
        label='Additional Instructions',
        required=False
    )
Step 2: Handle Form Submission in the View (views.py)
In the view, you'll process the form, generate the PDF, and return it as a response.

Install the necessary dependencies for PDF generation using the reportlab library:

bash
Copy code
pip install reportlab
Here is the code for handling the form submission and generating the PDF.

python
Copy code
from django.shortcuts import render
from django.http import HttpResponse
from .forms import PrescriptionForm
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Generate PDF function
def generate_pdf(data):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="prescription.pdf"'

    c = canvas.Canvas(response, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica", 12)

    # Header
    c.drawString(100, height - 50, f"Prescription for {data['patient_name']}")
    c.drawString(100, height - 70, f"Doctor: {data['doctor_name']}")

    # Medications and Dosage
    y_position = height - 100
    c.drawString(100, y_position, "Medications:")
    y_position -= 20
    for med in data['medications']:
        c.drawString(100, y_position, f"- {med}")
        y_position -= 20

    c.drawString(100, y_position, f"Dosage: {data['dosage']}")
    y_position -= 20

    # Additional Instructions
    if data['additional_instructions']:
        c.drawString(100, y_position, f"Additional Instructions: {data['additional_instructions']}")
    
    c.showPage()
    c.save()

    return response

# View to handle the form and generate the PDF
def prescription_view(request):
    if request.method == 'POST':
        form = PrescriptionForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data
            return generate_pdf(data)
    else:
        form = PrescriptionForm()

    return render(request, 'prescription_form.html', {'form': form})
Step 3: Setup the HTML Template (prescription_form.html)
Now, create a template where users can select medications and dosage options. This will also handle the submission of the form.

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Healthcare Prescription</title>
</head>
<body>
    <h1>Prescription Form</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Generate Prescription PDF</button>
    </form>
</body>
</html>
Step 4: URL Configuration (urls.py)
Add a URL pattern to link the view to the template.

python
Copy code
from django.urls import path
from . import views

urlpatterns = [
    path('prescription/', views.prescription_view, name='prescription_form'),
]
Step 5: Generate PDF on Submission
Once you run the Django server and visit the form page, you'll be able to fill out the form, select medications, and choose a dosage. After submitting the form, the PDF will be generated with the selected prescription data and will be displayed in the browser.

Notes:
CSS: You can style the form and the generated PDF as needed.
PDF Layout: The layout and font size of the PDF can be adjusted by modifying the generate_pdf function.
Form Validation: Additional validation for fields such as checking if at least one medication is selected can be added.
This should give you a fully functional prescription form with inner dropdowns and checkboxes for medication selection, and a PDF generation on submission.


JANNA


